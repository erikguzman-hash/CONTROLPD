rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user's role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || getUserRole(request.auth.uid) == 'coordinador' || getUserRole(request.auth.uid) == 'director');
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || getUserRole(request.auth.uid) == 'director');
      allow delete: if false; // No deletion of users
    }

    // Tasks Collection
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.assigneeId || getUserRole(request.auth.uid) == 'coordinador' || getUserRole(request.auth.uid) == 'director');
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.assigneeId || getUserRole(request.auth.uid) == 'coordinador' || getUserRole(request.auth.uid) == 'director');
      allow delete: if isAuthenticated() && getUserRole(request.auth.uid) == 'director';
    }
  }
}